Question
A pizza shop makes serves both vegan pizza and meat pizza. Customers place N orders at the shop. Their order number is printed on their bill. The shop displays K out of N orders (both vegan and meat) on their display screen at any given time.
The pizza shop is very famous and they receive many orders. To avoid confusion, vegan pizza orders are represented by positive numbers and meat pizza orders are represented by negative numbers on the screen. The orders are served in the order in which they are displayed on the screen. Each time an order is ready, its number is removed from the display screen and a new order is added to the display at the end of the list.
A couple has arrived with their child Billy.
Billy is a very naughty child. To keep him occupied, his parents tell him to make a list of the first meat pizza that appear in each set of K orders displayed on the shop's display screen.
Write an algorithm to help Billy make a list of the first meat based pizza order numbers displayed on the screen each time an order is delivered to a customer.
Input
The first line of the input consists of an integer - orderPlaced_size, representing the total number of orders placed (N).
The second line consists of N space-separated integers representing the vegan pizza and meat pizza order numbers of the orders placed by the customers.
The last line consists of an integer-size, representing the number of orders displayed on the screen (K).
Output
Print space-separated integers
representing the first meat pizza order of every K orders displayed on the screen each time an order is delivered to a customer. Print 0 if the screen does not display any meat pizza order.
Constraints
0 ≤ orderPlaced _size ≤ 106
0 ≤ size ≤ orderPlaced_ size
-109 ≤ order numbers of the orders placed ≤ 10°
Example
Input:
6
-11 -2 19 37 64 -18
3
Output:
-11 -2 0 -18
Explanation:
Step 1: At the time of the first display, the order numbers displayed are [-11, -2, 19].
So, the first displayed meat pizza




htt
SHL.
问题
A state has a number of city clusters in which the cities are connected by a network of roads. These roads are bi-directional (i.e., traffic can move in either direction). There are no connections between clusters.
Within a cluster, assume that two cities are connected by one road at most.
Write an algorithm to determine the total number of clusters of internally connected cities for one such network of cities and roads.
Input
The first line of the input consists of two space-separated integers-matinput_row and matinput_col, representing the number of cities in the state (N) and number of connection with each city (M).
The next N lines consist of M space-separated integers representing the matrix. Entry (i j) of the matrix is 1 if the ith city connects to the jth city; otherwise it is 0.
Output
Print an integer representing the total number of connected clusters.
Constraint
The elements of the matrix consist of 0s and 1s only.
Example
Input:
55
00000
00100
01010
00100
00000
Output:
3
Explanation:
Number of cities are 5 and total connecting cities are 4 (represented by 1), so total number of connected clusters are 3.
So, the output is 3.



Question
A company sells its products at N outlets.
All the outlets are connected to each other by a series of roads. There is only one way to reach from one outlet to another. Each outlet of the company has a unique outlet ID. Whenever the inventory of a certain product reaches a minimum limit then these K outlets make a request for extra inventory. The company sends the requested products from its warehouse to the outlets. In order to save on fuel, the warehouse supervisor directs the driver Mike to deliver the products to the outlets along the shortest and most direct path possible, without traveling any single road twice.
Write an algorithm to help Mike deliver his inventory to the maximum number of outlets without traveling any road twice.
Input
The first line of the input consists of an integer - num, representing the total number of outlets of the company including the warehouse (N).
The second line consists of an integer - koutletsCount, reprysenting the outlets that requested the extra inventory (K).
The third line consists of K space-separated integers representing the outlet IDs of the outlets that requested the extra inventory.
The fourth line consists of two space-separated integers - numR and conOutlet, representing the total number of roads between two outlets including the warehouse (numR (M) is always equal to N-1) and number of outlets connected by a road (conOutlet (X) is always equal to 2).
The next M lines consists of X space-separated integers representing the road between two outlets.
Output
Print an integer representing the maximum number of outlets that Mike can cover in a single trip without traveling any road twice.
Constraints
0 ≤ koutletsCount ≤ num ≤ 105
1 ≤ num≤ 105
1 ≤ A, B ≤ num; where A, B represent the outlets connected by a road numR=num-1
Example
Input:
4
3
234
3 2
1 2
1 3
1 4
Output:
2
Explanation:
In a single trip Mike can reach only two outlets i.e [2,3] or [2,4] or [3,4] because in order to reach the third outlet he would have to travel one road twice, which he cannot do.
So, the output is 2.
